@{
    ViewBag.Title = "Users Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@using ECommerce.Core.Enums.User
@using ECommerce.Core.Models.DTOs.User
@model ECommerce.Core.Models.DTOs.GenericResponses.BaseResponse<List<UserDto>>

<div class="container mt-5">
    <div class="row mb-3">
        <div class="col-md-3 mb-3">
            <input type="text" id="searchInputByEmail" class="form-control" placeholder="Search by Email">
        </div>
        <div class="col-md-2 mb-3">
            <select id="sortByUserType" class="form-control">
                @foreach (var userType in Enum.GetValues(typeof(UserType)))
                {
                    <option value="@userType">@userType</option>
                }
            </select>
        </div>
        <div class="col-md-2 mb-3">
            <button class="btn btn-primary w-100" id="searchButton">Search</button>
        </div>
    </div>

    <table class="table table-bordered table-hover text-center">
        <thead class="table-primary">
        <tr>
            <th style="width: 300px">FullName</th>
            <th style="width: 300px;">Email</th>
            <th style="width: 150px;">Role</th>
            <th style="width: 100px;">Actions</th>
        </tr>
        </thead>
        <tbody>
        @if (Model.Data == null || !Model.Data.Any())
        {
            <tr>
                <td colspan="4">No users found</td>
            </tr>
        }
        else
        {
            foreach (var user in Model.Data)
            {
                <tr>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td>@user.UserType</td>
                    <td>
                        <div class="btn-group d-flex justify-content-center">
                            <a href="@Url.Action("ViewUser", "ManagementUsers", new { id = user.Id })"
                               class="btn btn-success btn-sm" style="margin-right: 3px;">View User</a>
                        </div>
                    </td>
                </tr>
            }

            <input type="hidden" id="totalPages" value="@Math.Ceiling((double)Model.Data.Count() / 20)">
        }
        </tbody>
    </table>
    
    <nav>
        <ul class="pagination justify-content-center" id="paginationContainer"></ul>
    </nav>
</div>
<script>
    document.getElementById('searchButton').addEventListener('click', function () {
        let email = document.getElementById('searchInputByEmail').value;
        let userType = document.getElementById('sortByUserType').value;
        let page = 1;

        let queryParams = new URLSearchParams({
            searchByEmail: email,
            userType: userType,
            page: page
        });

        window.location.href = '@Url.Action("Index", "ManagementUsers")' + '?' + queryParams.toString();
    });

    function generatePagination(currentPage, totalPages) {
        let container = document.getElementById('paginationContainer');
        container.innerHTML = '';

        // Previous button (циклический переход)
        let prevPage = currentPage === 1 ? totalPages : currentPage - 1;
        container.innerHTML += `<li class="page-item">
        <a class="page-link" href="?searchByEmail=${getQueryParam('searchByEmail')}&userType=${getQueryParam('userType')}&page=${prevPage}">Previous</a>
    </li>`;

        // Цифры страниц
        for (let i = 1; i <= totalPages; i++) {
            container.innerHTML += `<li class="page-item ${i === currentPage ? 'active' : ''}">
            <a class="page-link" href="?searchByEmail=${getQueryParam('searchByEmail')}&userType=${getQueryParam('userType')}&page=${i}">${i}</a>
        </li>`;
        }

        // Next button (циклический переход)
        let nextPage = currentPage === totalPages ? 1 : currentPage + 1;
        container.innerHTML += `<li class="page-item">
        <a class="page-link" href="?searchByEmail=${getQueryParam('searchByEmail')}&userType=${getQueryParam('userType')}&page=${nextPage}">Next</a>
    </li>`;
    }

    function getQueryParam(param) {
        let urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(param) || '';
    }

    window.onload = function () {
        let currentPage = parseInt(getQueryParam('page')) || 1;

        // Получаем количество страниц из скрытого input, который передается с бэка
        let totalPages = parseInt(document.getElementById('totalPages').value) || 1;

        // Восстанавливаем введённые значения
        document.getElementById('searchInputByEmail').value = getQueryParam('searchByEmail');
        document.getElementById('sortByUserType').value = getQueryParam('userType');

        generatePagination(currentPage, totalPages);
    };


</script>
